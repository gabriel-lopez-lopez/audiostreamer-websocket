{
  "name": "binarize.js",
  "description": "binarize.js is a JavaScript library that converts any variable, array or object into binary format. This library is useful when you want to send and receive complex objects (especially when they include TypedArray) in ArrayBuffer format over WebSocket, XHR2, etc.",
  "version": "0.5.1",
  "author": {
    "name": "Eiji Kitamura",
    "url": "http://profiles.google.com/agektmr"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:agektmr/binarize.js.git"
  },
  "main": "src/binarize",
  "bugs": {
    "url": "https://github.com/agektmr/binarize.js/issues"
  },
  "licenses": [
    {
      "type": "Apache2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "dependencies": {},
  "readme": "# What is binarize.js?\nbinarize.js is a JavaScript library that converts any variable, array or object into binary format. This library is useful when you want to send and receive complex objects (especially when they include TypedArray) in ArrayBuffer format over WebSocket, XHR2, etc.  \n\n## Why not Protocol Buffers nor MessagePack?\nAlthough [Protocol Buffers](https://code.google.com/p/protobuf/) and [MessagePack](http://msgpack.org/) are widely used and have wider adoption in terms of implementation, their existing JS implementations don’t yet support TypedArray.  \nEventually when TypedArray is supported on either Protocol Buffers or MessagePack, you can replace binarize.js with them since they have similar API.  \n\n# How do you use binarize.js?\n    var typed = new Float64Array([1, Number.MAX_VALUE, Number.MIN_VALUE]);  \n    var object = {  \n      name: 'Eiji Kitamura',  \n      array: [1, 2, 3],  \n      object: {  \n        name: 'Eiji Kitamura',  \n        hello: 'こんにちは',  \n        typed: typed  \n      }  \n    };  \n  \n    // convert a JavaScript object into ArrayBuffer  \n    var buffer = binarize.pack(function(object) {  \n      ...  \n    });  \n  \n    // retrieve original object from ArrayBuffer  \n    var original = binarize.unpack(function(buffer) {  \n      ...  \n    });  \n\n## Supported Types\n    NULL:          0,  \n    UNDEFINED:     1,  \n    STRING:        2,  \n    NUMBER:        3,  \n    BOOLEAN:       4,  \n    ARRAY:         5,  \n    OBJECT:        6,  \n    INT8ARRAY:     7,  \n    INT16ARRAY:    8,  \n    INT32ARRAY:    9,  \n    UINT8ARRAY:    10,  \n    UINT16ARRAY:   11,  \n    UINT32ARRAY:   12,  \n    FLOAT32ARRAY:  13,  \n    FLOAT64ARRAY:  14,  \n    ARRAYBUFFER:   15,  \n    BLOB:          16  \n  \n\n# Formats\n\n## Null\nNull header will have no payload.  \n  \n     type     byte_length  \n    +--------+----------------+  \n    |0x00    |0x0000          |  \n    +--------+----------------+  \n\n## Undefined\nUndefined header will have no payload.  \n  \n     type     byte_length  \n    +--------+----------------+  \n    |0x01    |0x0000          |  \n    +--------+----------------+  \n\n## Strings\nStrings header will be followed by sequence of characters in Uint16Array.  \n  \n    ex) hello  \n     type     byte_length      payload  \n    +--------+----------------+----------------+----------------+  \n    |0x02    |0x000a          |0x0068 (h)      |0x0065 (e)      |  \n    +--------+-------+--------+-------+--------+-------+--------+  \n    |0x006c (l)      |0x006c (l)      |0x006f (o)      |  \n    +----------------+----------------+----------------+  \n\n## Number\nNumber header will be followed by number in Float64Array.  \n  \n    ex) Number.MAX_VALUE  \n     type     byte_length      payload  \n    +--------+----------------+--------------------------------+  \n    |0x03    |0x000e          |0x7fefffffffffffff              :  \n    +--------+----------------+------+-------------------------+  \n    :                                |  \n    +--------------------------------+  \n\n## Boolean\nBoolean header will followed by     0x1 when     true,     0x0 when     false.  \n  \n    ex) true  \n     type     byte_length      payload  \n    +--------+----------------+--------+  \n    |0x04    |0x0001          |0x01    |  \n    +--------+----------------+--------+  \n\n## Array\nArray header will be followed by sequence of Array elements.  \n  \n    ex) [1, 2, 3]  \n     type     length           byte_length  \n    +--------+----------------+----------------+  \n    |0x05    |0x0003          |0x21            |  \n    +--------+----------------+--------------------------------+  \n    |0x03    |0x000e          |0x0000000000000001              :  \n    +--------+----------------+------+-------------------------+  \n    :                                |  \n    +--------+----------------+------+-------------------------+  \n    |0x03    |0x000e          |0x0000000000000002              :  \n    +--------+----------------+------+-------------------------+  \n    :                                |  \n    +--------+----------------+------+-------------------------+  \n    |0x03    |0x000e          |0x0000000000000003              :  \n    +--------+----------------+------+-------------------------+  \n    :                                |  \n    +--------------------------------+  \n\n## Object\nObject header will be followed by sequence of combinations of key in Strings type and value in arbitrary type.  \n  \n    ex) {‘name’: ‘Eiji Kitamura’, ‘hello’: ‘こんにちは’}  \n     type     length           byte_length  \n    +--------+----------------+----------------+  \n    |0x06    |0x0002          |0x0042          |  \n    +--------+----------------+----------------+----------------+  \n    |0x02    |0x0010          |0x006e (n)      |0x0061 (a)      |  \n    +--------+-------+--------+-------+--------+----------------+  \n    |0x006d (m)      |0x0065 (e)      |0x02    |0x001a          |  \n    +--------+-------+--------+-------+--------+----------------+  \n    |0x0045 (E)      |0x0069 (i)      |0x006a (j)      |...  \n    +----------------+----------------+----------------+--------+  \n\n## Int8Array\nInt8Array header will be followed by sequence of 8bit interger values.  \n  \n    ex) 1  \n     type     byte_length      payload  \n    +--------+----------------+--------+  \n    |0x07    |0x0001          |0x01    |  \n    +--------+----------------+--------+  \n\n## Int16Array\nInt16Array header will be followed by sequence of 16bit interger values.  \n  \n    ex) 16  \n     type     byte_length      payload  \n    +--------+----------------+----------------+  \n    |0x08    |0x0002          |0x0010          |  \n    +--------+----------------+----------------+  \n\n## Int32Array\nInt32Array header will be followed by sequence of 32bit interger values.  \n  \n    ex) 32  \n     type     byte_length      payload  \n    +--------+----------------+--------------------------------+  \n    |0x09    |0x0004          |0x00000020                      |  \n    +--------+----------------+--------------------------------+  \n\n## Uint8Array\nUint8Array header will be followed by sequence of 8bit unsigned int values.  \n  \n    ex) 16  \n     type     byte_length      payload  \n    +--------+----------------+--------+  \n    |0x0a    |0x0001          |0x10    |  \n    +--------+----------------+--------+  \n\n## Uint16Array\nUint16Array header will be followed by sequence of 16bit unsigned int values.  \n  \n    ex) 16  \n     type     byte_length      payload  \n    +--------+----------------+----------------+  \n    |0x0b    |0x0002          |0x0010          |  \n    +--------+----------------+----------------+  \n\n## Uint32Array\nUint32Array header will be followed by sequence of 32bit unsigned int values.  \n  \n    ex) 32  \n     type     byte_length      payload  \n    +--------+----------------+--------------------------------+  \n    |0x0c    |0x0004          |0x00000020                      |  \n    +--------+----------------+--------------------------------+  \n\n## Float32Array\nFloat32Array header will be followed by sequence of 32bit floating point values.  \n  \n    ex) 32  \n     type     byte_length      payload  \n    +--------+----------------+--------------------------------+  \n    |0x0d    |0x0004          |0x00000020                      |  \n    +--------+----------------+--------------------------------+  \n\n## Float64Array\nFloat64Array header will be followed by sequence of 64bit floating point values.  \n  \n    ex) 64  \n     type     byte_length      payload  \n    +--------+----------------+--------------------------------+  \n    |0x0e    |0x0008          |0x0000000000000040              :  \n    +--------+----------------+------+-------------------------+  \n    :                                |  \n    +--------------------------------+  \n\n## ArrayBuffer\nArrayBuffer header will be followed by sequence of 8bit unsigned int values.  \n  \n    ex) 16  \n     type     byte_length      payload  \n    +--------+----------------+--------+  \n    |0x0f    |0x0001          |0x10    |  \n    +--------+----------------+--------+  \n\n## Blob\nBlob header will be followed by a combination of  payload in ArrayBuffer type and MIME type in Strings type.  \n  \n    ex) a blob  \n     type     byte_length  \n    +--------+----------------+  \n    |0x10    |0x0002          |  \n    +--------+----------------+--------+--------+--------+--------+  \n    |0x0f    |0x0010          |0x006e  |0x006e  |0x0061  |0x0061  |  \n    +--------+--------+-------++-------++-------++-------++-------++  \n    |0x006e  |0x006e  |0x0061  |0x0061  |0x006e  |0x006e  |0x0061  |  \n    +--------+--------+--------+--------+--------+--------+--------+  \n    |ArrayBuffer payload continuation...|  \n    +--------+----------------+---------+------+----------------+  \n    |0x02    |0x000a          |0x0069 (i)      |0x006d (m)      |  \n    +--------+-------+--------+-------+--------+-------+--------+  \n    |0x0061 (a)      |0x0067 (g)      |0x0065 (e)      |  \n    +----------------+----------------+----------------+",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/agektmr/binarize.js",
  "_id": "binarize.js@0.5.1",
  "_from": "binarize.js@>=0.5.1"
}
